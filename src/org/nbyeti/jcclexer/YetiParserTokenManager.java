/* Generated By:JavaCC: Do not edit this line. YetiParserTokenManager.java */
package org.nbyeti.jcclexer;
import java.io.*;

public class YetiParserTokenManager implements YetiParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 10;
         if ((active1 & 0x800L) != 0L)
            return 1;
         if ((active0 & 0x6ffffffffff8L) != 0L)
         {
            jjmatchedKind = 52;
            return 24;
         }
         return -1;
      case 1:
         if ((active0 & 0x80031e880L) != 0L)
            return 24;
         if ((active0 & 0x6ff7ffce1778L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 1;
            }
            return 24;
         }
         return -1;
      case 2:
         if ((active0 & 0x84001001108L) != 0L)
            return 24;
         if ((active0 & 0x67bffece4e70L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 24;
         }
         return -1;
      case 3:
         if ((active0 & 0x4686020e4070L) != 0L)
            return 24;
         if ((active0 & 0x2139fcc00e00L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 24;
         }
         return -1;
      case 4:
         if ((active0 & 0x212040000600L) != 0L)
            return 24;
         if ((active0 & 0x19bcc00800L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 24;
         }
         return -1;
      case 5:
         if ((active0 & 0x830000000L) != 0L)
            return 24;
         if ((active0 & 0x118cc00800L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 24;
         }
         return -1;
      case 6:
         if ((active0 & 0x1100000800L) != 0L)
            return 24;
         if ((active0 & 0x8cc00000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 24;
         }
         return -1;
      case 7:
         if ((active0 & 0x84000000L) != 0L)
            return 24;
         if ((active0 & 0x8c00000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 24;
         }
         return -1;
      case 8:
         if ((active0 & 0x8c00000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 24;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000L) != 0L)
            return 24;
         if ((active0 & 0x8400000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 24;
         }
         return -1;
      case 10:
         if ((active0 & 0x400000L) != 0L)
            return 24;
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 24;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 67);
      case 37:
         return jjStopAtPos(0, 79);
      case 38:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 40:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 56);
      case 42:
         return jjStopAtPos(0, 74);
      case 43:
         return jjStopAtPos(0, 72);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         return jjStopAtPos(0, 73);
      case 46:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 47:
         return jjStartNfaWithStates_0(0, 75, 1);
      case 58:
         return jjStopAtPos(0, 68);
      case 59:
         return jjStopAtPos(0, 61);
      case 60:
         return jjStopAtPos(0, 66);
      case 61:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 64:
         return jjStopAtPos(0, 64);
      case 91:
         return jjStopAtPos(0, 59);
      case 93:
         return jjStopAtPos(0, 60);
      case 94:
         return jjStopAtPos(0, 78);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x440000420L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800006000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x81000060040L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x202000010800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4010908000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000010L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10008000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x420004080300L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000000008L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 57);
      case 124:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 125:
         return jjStopAtPos(0, 58);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 41:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 46:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 61:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000428L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 24);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 24);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x30400080200L, active1, 0L);
      case 105:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000800L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040060000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000c00000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x48920004010L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000001100L, active1, 0L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 24);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 24);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c000000L, active1, 0L);
      case 124:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000040L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000040000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008004800L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x12100000010L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000L);
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 3, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80c20020L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 24);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 24);
         return jjMoveStringLiteralDfa3_0(active0, 0x1202000400L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800000000L);
      case 119:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 24);
         break;
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000400800L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 99:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 24);
         break;
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 24);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 24);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 24);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 24);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000L);
      case 102:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 24);
         break;
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 24);
         break;
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 24);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 24);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000200L);
      case 112:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 24);
         break;
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 24);
         return jjMoveStringLiteralDfa4_0(active0, 0x200040000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 24);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 24);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x820000800L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 24);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 24);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 24);
         break;
      case 119:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 24);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 24);
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80800000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 24);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 24);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 24);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 24);
         break;
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 24);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 22, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 63)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(24);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(8);
                  }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(7, 9);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(7, 9);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(4, 6);
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 17:
                  if ((0x18400000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 18:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if (curChar != 63)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x83ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(24);
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(7, 9);
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(16, 18);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(7, 9);
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   26, 27, 30, 31, 15, 16, 18, 2, 3, 5, 15, 16, 20, 18, 12, 13, 
   17, 19, 21, 28, 29, 34, 35, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, "\166\141\162", "\154\157\157\160", "\143\141\163\145", 
"\145\163\141\143", "\157\146", "\164\162\171", "\164\150\162\157\167", "\143\141\164\143\150", 
"\146\151\156\141\154\154\171", "\171\162\164", "\144\157", "\144\157\156\145", "\151\146", "\146\151", 
"\145\154\163\145", "\145\154\151\146", "\164\150\145\156", "\151\163", "\141\163", 
"\165\156\163\141\146\145\154\171\137\141\163", "\151\156\163\164\141\156\143\145\157\146", "\156\145\167", 
"\167\151\164\150", "\164\171\160\145\144\145\163\143", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\151\155\160\157\162\164", "\155\157\144\165\154\145", 
"\143\154\141\163\163", "\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", 
"\142\171\164\145", "\143\150\141\162", "\144\157\165\142\154\145", 
"\145\170\164\145\156\144\163", "\146\154\157\141\164", "\151\156\164", "\154\157\156\147", 
"\163\150\157\162\164", "\164\150\151\163", "\166\157\151\144", "\145\156\144", "\50\51", 
"\146\141\154\163\145", "\164\162\165\145", null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", "\75", "\74", 
"\41", "\72", "\75\75", "\174\174", "\46\46", "\53", "\55", "\52", "\57", "\46", 
"\174", "\136", "\45", "\56\56", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[36];
private final int[] jjstateSet = new int[72];
protected char curChar;
public YetiParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public YetiParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 36; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 81)
   {
      jjmatchedKind = 81;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
